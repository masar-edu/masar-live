name: "Install BBB"
description: "Install BigBlueButton"
runs:
  using: "composite"
  steps:
    - name: Git config - disable warnings
      shell: bash
      run: |
        git config --global advice.defaultBranchName false
        git config --global advice.detachedHead false
    - name: Merge branches
      uses: ./.github/actions/merge-branches
    - run: ./build/get_external_dependencies.sh
      shell: bash
    - name: Download all BBB artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-bbb-artifacts
        path: artifacts
    - name: List downloaded artifacts
      shell: bash
      run: |
        set -e
        echo "----ls artifacts/----"
        ls artifacts/
    - name: LIBREOFFICE CACHE - Set cache-key vars
      shell: bash
      run: |
        echo "BBB_LIBREOFFICE_IMAGE_NAME=$(head -n 1 bbb-libreoffice/docker/Dockerfile | cut -d ' ' -f 2)" >> $GITHUB_ENV
    - name: LIBREOFFICE CACHE - Restore bbb-libreoffice.tar from cache
      id: libreoffice-cache
      uses: actions/cache@v4
      with:
        path: bbb-libreoffice.tar
        key: ${{ env.BBB_LIBREOFFICE_IMAGE_NAME }}
    - name: LIBREOFFICE CACHE - Load docker image from bbb-libreoffice.tar
      shell: bash
      if: steps.libreoffice-cache.outputs.cache-hit == 'true'
      run: docker load -i bbb-libreoffice.tar
    - name: APT CACHE - Prepare directory and permissions
      shell: bash
      run: |
        sudo mkdir -p /var/cache/apt/archives/partial
        sudo chown -R "$USER":"$USER" /var/cache/apt
        sudo chmod -R u+rwX /var/cache/apt
    - name: APT CACHE - Restore from cache (if exists)
      uses: actions/cache/restore@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('bigbluebutton-config/bigbluebutton-release') }}
        restore-keys: |
              ${{ runner.os }}-apt-${{ hashFiles('bigbluebutton-config/bigbluebutton-release') }}
    - name: Generate CA
      shell: bash
      run: |
        sudo -i <<EOF
        set -e
        mkdir /root/bbb-ci-ssl/
        cd /root/bbb-ci-ssl/
        openssl rand -base64 48 > /root/bbb-ci-ssl/bbb-dev-ca.pass ;
        chmod 600 /root/bbb-ci-ssl/bbb-dev-ca.pass ;
        openssl genrsa -des3 -out bbb-dev-ca.key -passout file:/root/bbb-ci-ssl/bbb-dev-ca.pass 2048 ;
        openssl req -x509 -new -nodes -key bbb-dev-ca.key -sha256 -days 1460 -passin file:/root/bbb-ci-ssl/bbb-dev-ca.pass -out bbb-dev-ca.crt -subj "/C=CA/ST=BBB/L=BBB/O=BBB/OU=BBB/CN=BBB-DEV" ;
        EOF
    - name: Trust CA
      shell: bash
      run: |
        sudo -i <<EOF
        set -e
        sudo mkdir /usr/local/share/ca-certificates/bbb-dev/
        sudo cp /root/bbb-ci-ssl/bbb-dev-ca.crt /usr/local/share/ca-certificates/bbb-dev/
        sudo chmod 644 /usr/local/share/ca-certificates/bbb-dev/bbb-dev-ca.crt
        sudo update-ca-certificates
        EOF
    - name: Generate certificate
      shell: bash
      run: |
        sudo sh -c '
        cd /root/bbb-ci-ssl/
        echo "$(hostname -I | cut -d" " -f1) bbb-ci.test" >> /etc/hosts
        openssl genrsa -out bbb-ci.test.key 2048
        rm -f bbb-ci.test.csr bbb-ci.test.crt bbb-ci.test.key
        cat > bbb-ci.test.ext << EOF
        authorityKeyIdentifier=keyid,issuer
        basicConstraints=CA:FALSE
        keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
        subjectAltName = @alt_names
        [alt_names]
        DNS.1 = bbb-ci.test
        EOF
        openssl req -nodes -newkey rsa:2048 -keyout bbb-ci.test.key -out bbb-ci.test.csr -subj "/C=CA/ST=BBB/L=BBB/O=BBB/OU=BBB/CN=bbb-ci.test" -addext "subjectAltName = DNS:bbb-ci.test"
        openssl x509 -req -in bbb-ci.test.csr -CA bbb-dev-ca.crt -CAkey bbb-dev-ca.key -CAcreateserial -out bbb-ci.test.crt -days 825 -sha256 -passin file:/root/bbb-ci-ssl/bbb-dev-ca.pass -extfile bbb-ci.test.ext
        cd

        mkdir -p /local/certs/
        cp /root/bbb-ci-ssl/bbb-dev-ca.crt /local/certs/
        cat /root/bbb-ci-ssl/bbb-ci.test.crt > /local/certs/fullchain.pem
        cat /root/bbb-ci-ssl/bbb-dev-ca.crt >> /local/certs/fullchain.pem
        cat /root/bbb-ci-ssl/bbb-ci.test.key > /local/certs/privkey.pem
        '
    - name: Setup local repository
      shell: bash
      run: |
        sudo -i <<EOF
        set -e
        apt install -yq dpkg-dev
        cd /root && wget -nv http://ci.bbb.imdt.dev/cache-3rd-part-packages.tar
        cp -r /home/runner/work/bigbluebutton/bigbluebutton/artifacts/ /artifacts/
        cd /artifacts && tar xf /root/cache-3rd-part-packages.tar
        cd /artifacts && dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
        echo "deb [trusted=yes] file:/artifacts/ ./" >> /etc/apt/sources.list
        EOF
    - name: Prepare for install
      shell: bash
      run: |
        sudo sh -c '
        apt --purge -y remove apache2-bin
        apt-mark hold firefox #hold ff as bbb-install frequently stuck at `Installing the firefox snap`

        #bbb-webrtc-sfu: removes the special scheduling policies
        mkdir -p /etc/systemd/system/bbb-webrtc-sfu.service.d/
        tee /etc/systemd/system/bbb-webrtc-sfu.service.d/override.conf > /dev/null <<EOL
        [Service]
        CPUSchedulingPolicy=other
        Nice=19
        EOL
        systemctl daemon-reload

        #Install Sipp for dial-in tests
        apt install -y pkg-config dh-autoreconf ncurses-dev build-essential libssl-dev libpcap-dev libncurses5-dev libsctp-dev lksctp-tools cmake
        git clone --recurse-submodules https://github.com/SIPp/sipp.git /opt/sipp
        cd /opt/sipp
        git checkout 4682fdba2b63007f13a632c6eb06f0ece84cb7df #Set an old commit as the current code is not working
        cmake . -DUSE_SSL=1 -DUSE_SCTP=1 -DUSE_PCAP=1 -DUSE_GSL=1
        make
        sudo make install
        rm -r /opt/sipp/gtest
        rm -r /opt/sipp/src

        # Set dial plan for internal calls
        mkdir -p /opt/freeswitch/conf/dialplan/public/
        cat << EOF > "/opt/freeswitch/conf/dialplan/public/bbb_sip.xml"
        <include>
          <extension name="bbb_sp_call" continue="true">
              <condition field="network_addr" expression="\${domain}" break="on-false">
                  <action application="set" data="bbb_authorized=true"/>
                  <action application="transfer" data="\${destination_number} XML default"/>
              </condition>
          </extension>
        </include>
        EOF
        '
    - name: Install BBB
      shell: bash
      env:
        NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/bbb-dev/bbb-dev-ca.crt
        ACTIONS_RUNNER_DEBUG: true
      run: |
        sudo -i <<'EOF'
        set -e
        cd /root/
        wget -nv https://raw.githubusercontent.com/bigbluebutton/bbb-install/v3.0.x-release/bbb-install.sh -O bbb-install.sh
        sed -i "s|> /etc/apt/sources.list.d/bigbluebutton.list||g" bbb-install.sh
        chmod +x bbb-install.sh

        ./bbb-install.sh -v jammy-30-dev -s bbb-ci.test -j -d /certs/

        bbb-conf --salt bbbci
        sed -i "s/\"minify\": true,/\"minify\": false,/" /usr/share/etherpad-lite/settings.json
        sed -i "s/\"loglevel\": \"INFO\"/\"loglevel\": \"DEBUG\"/" /usr/share/etherpad-lite/settings.json
        sed -i "s/\"level\": \"info\"/\"level\": \"debug\"/" /usr/local/bigbluebutton/bbb-pads/config/settings.json
        sed -i "s/exports.DEBUG = false/exports.DEBUG = true/" /usr/local/bigbluebutton/bbb-graphql-actions/config.js
        sudo yq e -i '.log_level = "TRACE"' /usr/share/bbb-graphql-middleware/config.yml
        echo "HASURA_GRAPHQL_LOG_LEVEL=debug" | tee -a /etc/bigbluebutton/bbb-graphql-server.env
        cat > /etc/bigbluebutton/bbb-conf/apply-config.sh << HERE
        #!/bin/bash

        # Pull in the helper functions for configuring BigBlueButton
        source /etc/bigbluebutton/bbb-conf/apply-lib.sh

        # Available configuration options

        enableHTML5ClientLog
        #enableUFWRules

        HERE
        chmod +x /etc/bigbluebutton/bbb-conf/apply-config.sh
        bbb-conf --restart
        EOF
    - name: List systemctl services
      shell: bash
      run: |
        sudo -i <<EOF
        timeout 60 systemctl --type=service --state=running,exited,failed --all --no-pager --no-legend
        EOF
